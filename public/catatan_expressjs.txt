#Inisialisasi Proyek
npm init -y

#Instal Express.js terbaru V4
npm install express

#Buat file index.js
const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Hello, Express.js!');
});

app.listen(port, () => {
  console.log(`Server berjalan di http://localhost:${port}`);
});

#Jalankan Aplikasi
node index.js

===============================================================================================
#Instal pustaka PostgreSQL
npm install pg pg-promise

#konfigurasi koneksi
// db.js
const pgp = require('pg-promise')();
const connectionString = 'postgresql://username:password@localhost:5432/nama_database';
const db = pgp(connectionString);

module.exports = db;

#make migration
// createTable.js
const db = require('./db');

db.none(`
  CREATE TABLE items (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT
  )
`)
.then(() => {
  console.log('Tabel berhasil dibuat');
})
.catch(error => {
  console.error('Gagal membuat tabel', error);
});


#jalankan migration
node createTable.js

#buat repository
// crud.js
const db = require('./db');

function getAllItems() {
  return db.any('SELECT * FROM items');
}

function getItemById(id) {
  return db.one('SELECT * FROM items WHERE id = $1', id);
}

function createItem(name, description) {
  return db.one('INSERT INTO items(name, description) VALUES($1, $2) RETURNING *', [name, description]);
}

function updateItem(id, name, description) {
  return db.one('UPDATE items SET name=$1, description=$2 WHERE id=$3 RETURNING *', [name, description, id]);
}

function deleteItem(id) {
  return db.none('DELETE FROM items WHERE id = $1', id);
}

module.exports = { getAllItems, getItemById, createItem, updateItem, deleteItem };

#buat handler dan router
// routes/index.js
const express = require('express');
const router = express.Router();
const {
  getAllItems,
  getItemById,
  createItem,
  updateItem,
  deleteItem
} = require('../crud');

router.get('/items', async (req, res) => {
  const items = await getAllItems();
  res.json(items);
});

router.get('/items/:id', async (req, res) => {
  const id = req.params.id;
  const item = await getItemById(id);
  res.json(item);
});

router.post('/items', async (req, res) => {
  const { name, description } = req.body;
  const newItem = await createItem(name, description);
  res.json(newItem);
});

router.put('/items/:id', async (req, res) => {
  const id = req.params.id;
  const { name, description } = req.body;
  const updatedItem = await updateItem(id, name, description);
  res.json(updatedItem);
});

router.delete('/items/:id', async (req, res) => {
  const id = req.params.id;
  await deleteItem(id);
  res.json({ message: 'Item berhasil dihapus' });
});

module.exports = router;

===============================================================================================
#JWT install
npm install express jsonwebtoken body-parser

#example used
const express = require('express');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');

const app = express();
const PORT = 3000;
const secretKey = 'yourSecretKey'; // Change this to a strong secret key

// Middleware to parse JSON in request bodies
app.use(bodyParser.json());

// Example route for generating and returning a JWT
app.post('/login', (req, res) => {
  const { username, password } = req.body;

  // Validate user credentials (you would typically check against a database)
  if (username === 'example' && password === 'password') {
    // Generate a JWT with the user payload
    const token = jwt.sign({ username }, secretKey, { expiresIn: '1h' });

    // Send the JWT as a response
    res.json({ token });
  } else {
    res.status(401).json({ message: 'Invalid credentials' });
  }
});

// Middleware to authenticate requests using JWT
function authenticateToken(req, res, next) {
  const token = req.headers.authorization && req.headers.authorization.split(' ')[1];

  if (!token) {
    return res.status(401).json({ message: 'Unauthorized' });
  }

  jwt.verify(token, secretKey, (err, user) => {
    if (err) {
      return res.status(403).json({ message: 'Forbidden' });
    }

    req.user = user;
    next();
  });
}

// Protected route that requires authentication
app.get('/protected', authenticateToken, (req, res) => {
  res.json({ message: 'This is a protected route', user: req.user });
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running at http://localhost:${PORT}`);
});

===============================================================================================
#start simple 
#install nodemon
npm install nodemon --save-dev


#configure in package.json
"scripts": {
  "start": "nodemon index.js"
}

#how to start in terminal
npm start

===============================================================================================
#install pg to connect postgresql
npm install express pg

#example
const express = require('express');
const { Pool } = require('pg');

const app = express();
const PORT = process.env.PORT || 3000;

// Create a PostgreSQL connection pool
const pool = new Pool({
  user: 'your_postgres_user',
  host: 'your_postgres_host',
  database: 'your_postgres_database',
  password: 'your_postgres_password',
  port: 5432, // Default PostgreSQL port
});

// Example route to query the database
app.get('/users', async (req, res) => {
  try {
    // Query the database
    const result = await pool.query('SELECT * FROM users');

    // Send the result as JSON
    res.json(result.rows);
  } catch (error) {
    console.error('Error executing database query:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running at http://localhost:${PORT}`);
});

===============================================================================================
#make .env
npm install dotenv

#.env
PGUSER=your_postgres_user
PGHOST=your_postgres_host
PGDATABASE=your_postgres_database
PGPASSWORD=your_postgres_password
PGPORT=5432

#if you want listen
require('dotenv').config();

===============================================================================================


https://www.youtube.com/watch?v=YuPOYBXC44c

rangkum video dari link yangku kirim setelah ini

gunakan bullet point, fokus para poin utama, maksimal 3 kalimat per point. sertakan timestamp dan kelompokan berdasarkan tema
